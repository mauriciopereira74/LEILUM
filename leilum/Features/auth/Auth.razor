@layout LoginLayout
@page "/login"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@inject NotificationService NotificationService

<PageTitle>Login</PageTitle>

<RadzenRow Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 800px; overflow: hidden;">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-text-align-center rz-p-12 custom-login-column" >
            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-white rz-mb-6"><b>Login</b></RadzenText>
            <RadzenStack AlignItems="AlignItems.Center" Class="rz-mx-auto rz-my-12">

                <RadzenImage Path="/images/logo.png" Style="width: 15rem;" />

            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-p-12">
            <RadzenTemplateForm Data=@("SimpleLogin")>
                <RadzenLogin AllowResetPassword="false" Username=@email Password=@password AllowRememberMe="false"
                             LoginText="LogIn" UserText="Email" PasswordText="Password"
                             UserRequired="Email Address required."
                             PasswordRequired="Password required."
                             RegisterText="Create an Account"
                             RegisterMessageText="Don't have an Account yet?"
                             Login="@(args => HandleLogin(args))"
                             Register="@(args => HandleCreate())"/>
            </RadzenTemplateForm>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

<style>
    .custom-login-column {
        height: 100%;
        background-color: #001F3F !important; /* Substitua pela cor desejada */
        color: white;
    }
</style>

@code {
    private string?  email;
    private string? password;

    private async Task HandleLogin(LoginArgs args)
    {
        ILeilumLN ef = new LeilumLNFacade();
        if (ef.existsEmail(args.Username))
        {
            Utilizador user = ef.getUtilizadorWithEmail(args.Username);
            if (user.getPassword().Equals(args.Password))
            {
                CurrentUser.setCurrentUser(user);

                var customAuthStateProvider = (AuthStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    email = user.getEmail(),
                    tipo = user.getTipoUtilizador().ToString()
                });
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Wrong Password", Detail = "Try again with another Password!", Duration = 4000 });
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Couldn't find a register account with that Email Address", Detail = "Try again with another email or register a new account!", Duration = 6000 });
        }
    }


    private void HandleCreate()
    {
        NavigationManager.NavigateTo("/create", true);
    }
}