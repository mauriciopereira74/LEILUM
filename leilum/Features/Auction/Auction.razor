@page "/auction/{id}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@using System.Timers
@inject IJSRuntime JSRuntime


<PageTitle>Detalhes do Leilão</PageTitle>

@if (leilao != null)
{
    <RadzenCard Style="width: 100%; margin: 10px;">
        <div class="card-header custom-header" style="display: flex; align-items: center; justify-content: space-between; padding: 10px; border-radius: 10px; height: 350px;">
            <div style="flex: 1;">
                <img src="@leilao.getLote().getImagPath()" alt="Auction Image" style="max-width: 100%; height: 300px; border-radius: 50%; overflow: hidden;"  />
            </div>
            <div style="flex: 1; padding: 10px; border: 2px solid #4CAF50; border-radius: 5px; text-align: center;">
                <h4>Current Bid</h4>
                <p style="font-size: 18px; color: #4CAF50;">@String.Format(new System.Globalization.CultureInfo("pt-PT"), "{0:C}", leilao.getvalorAtual())</p>
            </div>
            <div style="flex: 1; text-align: right;">
                <p><b>Time Remaining:</b> <span id="remainingTime"></span></p>
            </div>
        </div>
        <RadzenRow Gap="1rem" Style="margin-top: 20px;">
            <RadzenColumn Size="8" SizeSM="6">
                <RadzenTemplateForm TItem="Leilao" Data="@leilao">
                    <RadzenStack>
                        <RadzenFormField Text="Title" Variant="@variant">
                            <ChildContent>
                                <RadzenTextBox Value=@leilao.getTitulo() ReadOnly="true" disabled/>
                            </ChildContent>
                        </RadzenFormField>
                        <RadzenFormField Text="Category" Variant="@variant">
                            <ChildContent>
                                <RadzenTextBox Value=@leilao.getCategoria().getDesignacao() ReadOnly="true" disabled/>
                            </ChildContent>
                        </RadzenFormField>
                        <RadzenFormField Text="Time Interval" Variant="@variant">
                            <ChildContent>
                                <RadzenTextBox Value=@leilao.getDataFinal().ToString() ReadOnly="true" disabled/>
                            </ChildContent>
                        </RadzenFormField>
                    </RadzenStack>
                </RadzenTemplateForm>
            </RadzenColumn>
            <RadzenColumn Size="8" SizeSM="6">
                <RadzenTemplateForm TItem="Leilao" Data="@leilao">
                    <RadzenStack>
                        <RadzenFormField Text="Minimum Value" Variant="@variant">
                            <ChildContent>
                                <RadzenTextBox Value=@leilao.getValorMinimo().ToString() ReadOnly="true" disabled/>
                            </ChildContent>
                        </RadzenFormField>
                        <RadzenFormField Text="Opening Value" Variant="@variant">
                            <ChildContent>
                                <RadzenTextBox Value=@leilao.getValorAbertura().ToString() ReadOnly="true" disabled/>
                            </ChildContent>
                        </RadzenFormField>
                        @if (canBid() && leilao.getEstado() == 1)
                        {
                            <RadzenFormField Text="Your Bid" Variant="@variant">
                                <ChildContent>
                                    <RadzenNumeric Disabled="@(!canBid())" @bind-Value="@ValorDoLance" Placeholder="Enter your bid" Style="width: 100%" Min="@Convert.ToDecimal(valorMinimoLance)"/>
                                    <RadzenButton Disabled="@(!canBid())" ButtonType="ButtonType.Button" Text="Bid Now" Click="@(() => bid())" Style="width: 100%; height: 100%;" />
                                </ChildContent>
                            </RadzenFormField>
                        }
                    </RadzenStack>
                </RadzenTemplateForm>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenButton ButtonType="ButtonType.Button" Text="Go Back" Click="@turnBack" Style="margin-top: 15px" />
            <RadzenText Style="margin-top: 20px"><b>See Items information bellow.</b></RadzenText>
        </RadzenRow>
    </RadzenCard>
    @foreach (Artigo artigo in this.leilao.getLote().getArtigos())
    {
        <RadzenCard Style="width: 100%; margin: 10px;">
            <RadzenStack>
                <RadzenRow RowGap="10px">
                    <RadzenColumn>
                        <RadzenImage Style="max-width: 300px; max-height: 200px" Path="@artigo.getImagPath()"/>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0 rz-font-weight-bold" style="color: #000;"><b>Item Name:</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color: #000000">@artigo.getDesignacao()</RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0 rz-font-weight-bold" style="color: #000;"><b>Item Characteristics:</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color: #000000">@artigo.getCaracteristicas()</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0 rz-font-weight-bold"><b>Item Description:</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color: #000000">@artigo.getDescricao()</RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenCard>
    }


}
else
{
    NavigationManager.NavigateTo("/");
}

<style>
    .custom-header {
        background-color: #001F3F !important; /* Substitua pela cor desejada */
        color: white;
    }
</style>

<script>
    function updateRemainingTime(formattedTime) {
        var remainingTimeElement = document.getElementById('remainingTime');
        if (remainingTimeElement) {
            remainingTimeElement.innerText = formattedTime;
        }
    }
</script>

@code {

    Utilizador user = CurrentUser.getCurrentUser();
    ILeilumLN ln = new LeilumLNFacade();
    Leilao leilao;
    List<Artigo> artigos;
    Variant variant = Variant.Filled;

    double valorMinimoLance;
    double ValorDoLance;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(id, out int leilaoId))
        {
            leilao = ln.getLeilao(leilaoId);
            artigos= leilao.getLote().getArtigos();
            ValorDoLance = leilao.getvalorAtual();
            valorMinimoLance = leilao.getvalorAtual()+1;
            var timer = new Timer(100);
            timer.Elapsed += (sender, e) => { InvokeAsync(UpdateTimeRemaining); };
            timer.AutoReset = true;
            timer.Start();

            await base.OnInitializedAsync();
        }
        else
        {
            error();
        }
    }

    private bool canBid()
    {
        if (user != null)
        {
            if (user.getEmail().Equals(leilao.getAvaliador().getEmail()) || user.getEmail().Equals(leilao.getComitente().getEmail()))
            {
                return false;
            }
            return true;
        }
        return false;
    }

    void UpdateTimeRemaining()
    {
        // Atualizar o tempo restante a cada segundo
        if (leilao != null)
        {
            TimeSpan timeRemaining = leilao.getDataFinal() - DateTime.Now;

            // Se o leilão já terminou, exibir "Encerrado"
            if (timeRemaining.TotalSeconds < 0)
            {
                SetRemainingTime("Encerrado");
            }
            else
            {
                SetRemainingTime($"{(int)timeRemaining.TotalDays}d {timeRemaining.Hours}h {timeRemaining.Minutes}m {timeRemaining.Seconds}s");
            }
        }
    }
    void SetRemainingTime(string formattedTime)
    {
        // Atualizar o elemento HTML com o tempo restante formatado
        JSRuntime.InvokeVoidAsync("updateRemainingTime", formattedTime);
    }

    private void error()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "No Auction found!", Duration = 4000 });
        turnBack();
    }

    private void turnBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private void bid()
    {   
        if (leilao != null && user != null)
        {
            if (ValorDoLance > leilao.getvalorAtual())
            {
                bool flag = ln.addLicitacao(leilao.getNrLeilao(), user.getEmail(), ValorDoLance);
                if (flag)
                {
                    leilao.setLicitacaoAtual(ValorDoLance);
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Bid placed successfully!", Duration = 4000 });
                    ln.adicionaNotificacao(new Notificacao(user.getEmail(),"You Bid the Auction" + " #" +leilao.getNrLeilao(), DateTime.Now));
                }
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Invalid Bid!", Duration = 4000 });
            }
        }
        else
        {
            // Adicione uma notificação ou manipulação de erro apropriada se leilao ou user for null
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Auction or user is null!", Duration = 4000 });
        }
    }
}