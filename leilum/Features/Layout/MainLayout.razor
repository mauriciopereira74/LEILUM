@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<RadzenLayout>
    <RadzenHeader>
       <div class="header-content">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel>
                <div>
                    <img src="/images/logo.png" alt="logo" />
                </div>
            </RadzenLabel>
        </div>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" Style="width: max-content">
        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
            <AuthorizeView>
                <Authorized>
                    <RadzenPanelMenuItem Text="Overview" Icon="home" Click="@(() => NavigateTo("/welcome"))"/>
                    <RadzenPanelMenuItem Text="Suggest" Icon="grade" Click="@(() => NavigateTo("/suggest"))"/>
                    <RadzenPanelMenuItem Text="History" Icon="history" Click="@(() => NavigateTo("/history"))"/>
                    <RadzenPanelMenuItem Text="Notifications" Icon="feedback" Click="@(() => NavigateTo("/notifications"))"/>
                    <RadzenPanelMenuItem Text="Profile" Icon="face" Click="@(() => NavigateTo("/profile"))"/>
                    <RadzenPanelMenuItem Text="Logout" Icon="logout" class="logout" Click="@(() => Logout())"/>
                </Authorized>
                <NotAuthorized>
                    <RadzenPanelMenuItem Text="Overview" Icon="home" Click="@(() => NavigateTo("/welcome"))"/>
                    <RadzenPanelMenuItem Text="Login" Icon="login" class="login" Click="@(() => NavigateTo("/"))"/>
                </NotAuthorized>
            </AuthorizeView>
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
</RadzenLayout>
<RadzenNotification />

@code {
    bool sidebarExpanded = true;

    void NavigateTo(string url)
    {
        navManager.NavigateTo(url);
    }

    async void Logout()
    {
        var customAuthStateProvider = (auth.AuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
        CurrentUser.setCurrentUser(null);
    }
}